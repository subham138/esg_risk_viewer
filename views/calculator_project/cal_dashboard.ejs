<script src="js/chart/google/google-chart-loader.js"></script>
<style>
    .chart-container {
        display: flex;
        align-items: center;
        flex-direction: column;
        flex-wrap: wrap;
    }

    .chart-container .filters {
        display: flex;
        flex-direction: row;
        margin-left: 20px;
        align-items: center;
    }

    .filter-checkbox {
        margin: 5px 10px;
        cursor: pointer;
    }
    .checkbox label {
        font-size: 10px;
        padding-left: 6px;
    }
    .checkbox label::before {
        margin-top: 1px;
        width: 15px;
        height: 15px;
    }
    .chart-cust-container{
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
  </style>
<div class="row ml-0">
    <div class="col-md-4 p-l-0 chart-cust-container">
        <div id="act-chart"></div>
        <div class="text-center">
            <button class="btn btn-pill btn-outline-success btn-air-success btn-xs" type="button" onclick="showModal(this, 'A')">
                <i class="icofont icofont-eye-alt"></i>
                <span class="ml-3">View Calculation</span>
            </button>
        </div>
    </div>
    <div class="col-md-4 p-l-0 chart-cust-container">
        <div class="chart-container">
            <div id="sub-trans-chart"></div>
            <div class="filters">
                <div class="form-check form-check-inline checkbox checkbox-primary">
                    <input class="form-check-input" type="checkbox" id="checkbox-scope1" checked onchange="updateChart()">
                    <label class="form-check-label" for="checkbox-scope1">Scope 1</label>
                </div>
                <div class="form-check form-check-inline checkbox checkbox-primary">
                    <input class="form-check-input" type="checkbox" id="checkbox-scope2" checked onchange="updateChart()">
                    <label class="form-check-label" for="checkbox-scope2">Scope 2</label>
                </div>
                <div class="form-check form-check-inline checkbox checkbox-primary">
                    <input class="form-check-input" type="checkbox" id="checkbox-scope3" checked onchange="updateChart()">
                    <label class="form-check-label" for="checkbox-scope3">Scope 3</label>
                </div>
            </div>
        </div>
        <div class="text-center">
            <button class="btn btn-pill btn-outline-success btn-air-success btn-xs" type="button" onclick="showModal(this, 'S')">
                <i class="icofont icofont-eye-alt"></i>
                <span class="ml-3">View Calculation</span>
            </button>
        </div>
    </div>
    <div class="col-md-4 p-l-0 chart-cust-container">
        <div id="pathway-chart"></div>
        <div class="text-center">
            <button class="btn btn-pill btn-outline-success btn-air-success btn-xs" type="button" onclick="showModal(this, 'P')">
                <i class="icofont icofont-eye-alt"></i>
                <span class="ml-3">View Calculation</span>
            </button>
        </div>
    </div>
</div>

<script type="text/javascript">
    google.charts.load('current', {packages: ['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    let chart, subTrnsDt, subTrnsRawDt, options, actData, actRawData, pathData, pathRawData;

    // Define custom colors for each scope
    const seriesColors = ['#4285F4', '#EA4335', '#34A853']; // Scope 1: Blue, Scope 2: Red, Scope 3: Green

    function drawChart() {
        drawStackedActChart()
        drawStackedPathChart()
        drawSubTrnsDtChart()
    }

    function drawSubTrnsDtChart(){
        // Initialize subTrnsDt with three scopes
        subTrnsRawDt = [
            ['Year', 'Scope 1', 'Scope 2', 'Scope 3'],
            ['2016', 1000, 401, 600],
            ['2017', 1170, 460, 720],
            ['2018', 661, 1120, 820],
            ['2019', 1030, 540, 940]
        ]
        subTrnsDt = google.visualization.arrayToDataTable(subTrnsRawDt);

        // Define initial options
        options = {
            title: 'Pathway - Actual',
            chartArea: {width: '50%', height: '80%'},
            curveType: 'function',
            tooltip: { isHtml: true },
            legend: { 
                position: 'right',
                alignment: 'left',  // Center align the legend
                maxLines: 2,          // Allow up to 2 lines if needed
                textStyle: {fontSize: 8, color: '#555'}
            },
            colors: seriesColors,
            lineWidth: 2,
            series: {
                0: { pointSize: 7 }, // Scope 1 points size
                1: { pointSize: 7 }, // Scope 2 points size
                2: { pointSize: 7 }  // Scope 3 points size
            }
        };

        // Initialize chart and apply dynamic resizing on load
        chart = new google.visualization.LineChart(document.getElementById('sub-trans-chart'));
        window.onload = updateChart;
        window.onresize = () => chart.draw(subTrnsDt, options);
    }

    function drawStackedActChart(){
        actRawData = [
          ['Year', 'Scope 1', 'Scope 2', 'Scope 3'],
          ['2016', 1000, 400, 600],
          ['2017', 1170, 462, 720],
          ['2018', 660, 1120, 820],
          ['2019', 1030, 542, 940]
        ]
        actData = google.visualization.arrayToDataTable(actRawData);

        const actOptions = {
          title: 'Actual',
          chartArea: {width: '50%', height: '80%'},
          isStacked: true,
          tooltip: { isHtml: true },
          colors: seriesColors,
          vAxis: {
            title: 'Total Emissions',
            },
        //   vAxis: {
        //     title: 'Total Emissions',
        //     // minValue: 0
        //   },
        //   hAxis: {
        //     title: 'Year',
        //     slantedText: true, // Makes year labels angled for better readability if there are many
        //     slantedTextAngle: 45 // Sets the angle for slanted text
        //   },
          legend: {
            position: 'right',
            alignment: 'left',  // Center align the legend
            maxLines: 2,          // Allow up to 2 lines if needed
            textStyle: {fontSize: 8, color: '#555'}
          }
        };

        const chart = new google.visualization.ColumnChart(document.getElementById('act-chart'));
        chart.draw(actData, actOptions);
    }

    function drawStackedPathChart(){
        pathRawData = [
          ['Year', 'Scope 1', 'Scope 2', 'Scope 3'],
          ['2016', 1003, 400, 600],
          ['2017', 1170, 460, 720],
          ['2018', 660, 1120, 820],
          ['2019', 1030, 545, 940]
        ]
        pathData = google.visualization.arrayToDataTable(pathRawData);

        const pathOptions = {
          title: 'Pathway',
          chartArea: {width: '50%', height: '80%'},
          isStacked: true,
          tooltip: { isHtml: true },
          colors: seriesColors,
        //   hAxis: {
        //     title: 'Year',
        //     minValue: 0
        //   },
          vAxis: {
            title: 'Total Emissions'
          },
          legend: {
            position: 'right',
            alignment: 'top',  // Center align the legend
            maxLines: 2,          // Allow up to 2 lines if needed
            textStyle: {fontSize: 8, color: '#555'}
          }
        };

        const chart = new google.visualization.ColumnChart(document.getElementById('pathway-chart'));
        chart.draw(pathData, pathOptions);
    }

    function updateChart() {
        const scope1Checkbox = document.getElementById("checkbox-scope1");
        const scope2Checkbox = document.getElementById("checkbox-scope2");
        const scope3Checkbox = document.getElementById("checkbox-scope3");

        const scope1Visible = scope1Checkbox.checked;
        const scope2Visible = scope2Checkbox.checked;
        const scope3Visible = scope3Checkbox.checked;

        // Ensure at least one scope is visible
        if (!scope1Visible && !scope2Visible && !scope3Visible) {
            scope3Checkbox.checked = true;
        }

        // Update subTrnsDt visibility based on checkboxes
        subTrnsDt.setColumnProperty(1, 'role', scope1Checkbox.checked ? null : 'certainty');
        subTrnsDt.setColumnProperty(2, 'role', scope2Checkbox.checked ? null : 'certainty');
        subTrnsDt.setColumnProperty(3, 'role', scope3Checkbox.checked ? null : 'certainty');

        // Update visible colors for the selected scopes only
        const visibleColors = [];
        if (scope1Checkbox.checked) visibleColors.push(seriesColors[0]);
        if (scope2Checkbox.checked) visibleColors.push(seriesColors[1]);
        if (scope3Checkbox.checked) visibleColors.push(seriesColors[2]);
        options.colors = visibleColors;

        // Draw chart with updated options
        chart.draw(subTrnsDt, options);
    }

    function showModal(e, flag){
        var data = [], title = '';
        switch (flag) {
            case 'A':
                data = actRawData                
                title = 'Calculation for Actual Value'
                break;
            case 'S':
                data = subTrnsRawDt
                title = 'Calculation for Actual Value - Pathway Value'
                break;
            case 'P':
                data = pathRawData
                title = 'Calculation for Pathway Value'
                break;
            default:
                break;
        }
        var table_data = ''        
        if(data.length > 0){
            let i = 0
            data.forEach(dt => {
                table_data = table_data + `<tr>`
                if(i == 0){
                    dt.forEach(ndt => {
                        table_data = table_data + `<th scope="col">${ndt}</th>`
                    })
                }else{
                    dt.forEach(ndt => {
                        table_data = table_data + `<td>${ndt}</td>`
                    })
                }
                table_data = table_data + `</tr>`
                i++
            });
        }else{
            table_data = table_data + `<tr><td class="text-danger text-center">NO DATA FOUND</td></tr>`
        }

        var modal_containts = `
        <div class="modal fade" id="chart-modal" tabindex="-1" aria-labelledby="chart-modal" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">${title}</h5>
                        <button class="btn-close" type="button" data-bs-dismiss="modal" aria-label="Close" data-bs-original-title="" title=""></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="table-responsive mt-3">
                                    <table class="table table-bordered text-center">
                                        ${table_data}
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" data-bs-dismiss="modal" data-bs-original-title="" title="">Close</button>
                        <!-- <button class="btn btn-primary" type="button" data-bs-original-title="" title="">Save changes</button> -->
                    </div>
                </div>
            </div>
        </div>
        `
        $(modal_containts).modal('show')
    }
    $(document).on('hide.bs.modal','#chart-modal', function () {
        $(this).detach()
    });
</script>